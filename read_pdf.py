import pandas as pd
import pdfplumber
# from data_utils import possible_left_ranges


# Following module reads the pdf, finds the table of transactions
# and return a dataframe with all transactions in it.
# There are many if clauses in the format_table and format_row
# functions, as the pdf generated by the disclosures-clerk website
# do not have uniform formatting so that the pdfplumber
# app has trouble

def format_row(text, page_number):
    flags = [' S ', ' P ', ' E ']
    buy_sell_flag = ''
    for flag in flags:
        if (text.find(flag) != -1):
            buy_sell_flag = flag
    if buy_sell_flag == '':
        print('Formatting error on page {}'.format(page_number))
        return []
    partial_flag = '' if (text.find('partial') == -1) else ' (partial)'
    shift = 0 if (partial_flag == '') else 10
    text = text.split(buy_sell_flag)
    stock_name = text[0][3:] if (text[0][:2] in ['JT', 'DC', 'SP']) else text[0]
    purchase_date = text[1][shift:10 + shift]
    notification_date = text[1][shift + 11:shift + 21]
    rest = (text[1][shift + 21:]).split('-')
    invested_amount = rest[0] + '- \$'
    if len(rest) < 2:
        invested_amount = rest[0].split('\n')[0]
    else:
        for char in rest[1]:
            if char.isnumeric():
                invested_amount += char
            else:
                pass

    purchase_info = [stock_name, buy_sell_flag + partial_flag, purchase_date, notification_date, invested_amount]
    return purchase_info


def format_table(table, page_number):
    formatted_table = []
    expected_columns = ['ID', 'Owner', 'Asset', 'Transaction\nType', 'Date',
                        'Notification\nDate', 'Amount', 'Cap.\nGains >\n$200?']
    stock_purchases = table[2:] if (table[0] != expected_columns) else table[1:]

    # Bunch of if-statements as trades often are not formatted consistently
    # and need to be tackled case-by-case
    for row in stock_purchases:
        if (row[0] == '') and (row[1] == '') and ((row[2][:2] == 'F\x00')
                                                  or (row[2][:2] == 'S\x00')) or (row.count('') >= 6):
            continue
        elif (set(row) == {'', None}) or (set(row) == set([''])):
            continue
        elif (row[0] == ''):
            stock_name = row[2].split('\n')[0]
            buy_sell_flag = row[3]
            purchase_date = row[4]
            notification_date = row[5]
            invested_amount = '' if (row[6] is None) else row[6].split('$')
            left_range = '' if (invested_amount=='') else float(invested_amount[1][:-2].strip().replace(',', ''))
            if (len(invested_amount) < 3) or (left_range < 1001):
                invested_amount = left_range
            else:
                invested_amount = '\$' + invested_amount[1][:-1] + '\$' + invested_amount[2]
            purchase_info = [stock_name, buy_sell_flag, purchase_date, notification_date, invested_amount]
        elif ('$' not in row[0]):
            continue
        else:
            purchase_info = format_row(row[0], page_number)
        formatted_table.append(purchase_info)
    column_names = ['stock_name', 'buy_sell_flag', 'purchase_date', 'notification_date', 'invested_amount']
    return pd.DataFrame(columns=column_names, data=formatted_table)


def read_pdf(file_name):
    full_table_df = pd.DataFrame()
    with pdfplumber.open(file_name) as pdf:
        for page_number, page in enumerate(pdf.pages):
            table = page.extract_table(table_settings={
                'explicit_horizontal_lines': [page.height - 70]
            })
            if table:
                formatted_table_df = format_table(table, page_number)
            else:
                formatted_table_df = pd.DataFrame()
            full_table_df = pd.concat([full_table_df, formatted_table_df])
    return full_table_df.reset_index(drop=True)